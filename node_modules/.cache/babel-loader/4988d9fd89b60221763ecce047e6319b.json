{"ast":null,"code":"import { createStore, applyMiddleware } from \"redux\";\nimport thunkMiddleware from \"redux-thunk\";\nimport fetch from \"cross-fetch\";\nconst UPDATE_MESSAGES = \"updateMessages\";\nconst ADD_MESSAGE = \"addMessage\";\nconst apiUrl = \"http://localhost:3001\";\nexport function updateMessages(messages) {\n  return {\n    type: UPDATE_MESSAGES,\n    messages\n  };\n}\nexport function fetchMessages() {\n  return dispatch => {\n    return fetch(apiUrl).then(response => response.json()).then(response => {\n      dispatch(updateMessages(response));\n    });\n  };\n}\nexport function pushMessage(message) {\n  return {\n    type: ADD_MESSAGE,\n    message\n  };\n}\nexport function sendMessage(data) {\n  return dispatch => {\n    return fetch(apiUrl, {\n      method: \"POST\",\n      body: JSON.stringify(data)\n    }).then(response => dispatch(pushMessage(data)));\n  };\n}\nconst initialState = {\n  messages: []\n};\nexport default createStore(function (state = initialState, action) {\n  switch (action.type) {\n    case ADD_MESSAGE:\n      {\n        return { ...state,\n          messages: [...state.messages, action.message]\n        };\n      }\n\n    case UPDATE_MESSAGES:\n      {\n        return { ...state,\n          messages: action.messages\n        };\n      }\n\n    default:\n      {\n        return state;\n      }\n  }\n}, applyMiddleware(thunkMiddleware));","map":{"version":3,"sources":["D:/Profiles/chat-react/src/store.js"],"names":["createStore","applyMiddleware","thunkMiddleware","fetch","UPDATE_MESSAGES","ADD_MESSAGE","apiUrl","updateMessages","messages","type","fetchMessages","dispatch","then","response","json","pushMessage","message","sendMessage","data","method","body","JSON","stringify","initialState","state","action"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,OAAOC,eAAP,MAA4B,aAA5B;AACA,OAAOC,KAAP,MAAkB,aAAlB;AAEA,MAAMC,eAAe,GAAG,gBAAxB;AACA,MAAMC,WAAW,GAAG,YAApB;AACA,MAAMC,MAAM,GAAG,uBAAf;AAEA,OAAO,SAASC,cAAT,CAAwBC,QAAxB,EAAkC;AACvC,SAAO;AACLC,IAAAA,IAAI,EAAEL,eADD;AAELI,IAAAA;AAFK,GAAP;AAID;AAED,OAAO,SAASE,aAAT,GAAyB;AAC9B,SAAQC,QAAD,IAAc;AACnB,WAAOR,KAAK,CAACG,MAAD,CAAL,CACJM,IADI,CACCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADb,EAEJF,IAFI,CAEEC,QAAD,IAAc;AAClBF,MAAAA,QAAQ,CAACJ,cAAc,CAACM,QAAD,CAAf,CAAR;AACD,KAJI,CAAP;AAKD,GAND;AAOD;AAED,OAAO,SAASE,WAAT,CAAqBC,OAArB,EAA8B;AACnC,SAAO;AACLP,IAAAA,IAAI,EAAEJ,WADD;AAELW,IAAAA;AAFK,GAAP;AAID;AAED,OAAO,SAASC,WAAT,CAAqBC,IAArB,EAA2B;AAChC,SAAQP,QAAD,IAAc;AACnB,WAAOR,KAAK,CAACG,MAAD,EAAS;AAAEa,MAAAA,MAAM,EAAE,MAAV;AAAkBC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeJ,IAAf;AAAxB,KAAT,CAAL,CACJN,IADI,CACEC,QAAD,IAAcF,QAAQ,CAACI,WAAW,CAACG,IAAD,CAAZ,CADvB,CAAP;AAED,GAHD;AAID;AAGD,MAAMK,YAAY,GAAG;AACnBf,EAAAA,QAAQ,EAAE;AADS,CAArB;AAIA,eAAeR,WAAW,CAAC,UAAUwB,KAAK,GAAGD,YAAlB,EAAgCE,MAAhC,EAAwC;AACjE,UAAQA,MAAM,CAAChB,IAAf;AACE,SAAKJ,WAAL;AAAkB;AAChB,eAAO,EACL,GAAGmB,KADE;AAELhB,UAAAA,QAAQ,EAAE,CAAC,GAAGgB,KAAK,CAAChB,QAAV,EAAoBiB,MAAM,CAACT,OAA3B;AAFL,SAAP;AAID;;AACD,SAAKZ,eAAL;AAAsB;AACpB,eAAO,EACL,GAAGoB,KADE;AAELhB,UAAAA,QAAQ,EAAEiB,MAAM,CAACjB;AAFZ,SAAP;AAID;;AACD;AAAS;AACP,eAAOgB,KAAP;AACD;AAfH;AAiBD,CAlByB,EAkBvBvB,eAAe,CAACC,eAAD,CAlBQ,CAA1B","sourcesContent":["import { createStore, applyMiddleware } from \"redux\";\nimport thunkMiddleware from \"redux-thunk\";\nimport fetch from \"cross-fetch\";\n\nconst UPDATE_MESSAGES = \"updateMessages\";\nconst ADD_MESSAGE = \"addMessage\";\nconst apiUrl = \"http://localhost:3001\";\n\nexport function updateMessages(messages) {\n  return {\n    type: UPDATE_MESSAGES,\n    messages\n  };\n}\n\nexport function fetchMessages() {\n  return (dispatch) => {\n    return fetch(apiUrl)\n      .then(response => response.json())\n      .then((response) => {\n        dispatch(updateMessages(response))\n      });\n  }\n}\n\nexport function pushMessage(message) {\n  return {\n    type: ADD_MESSAGE,\n    message\n  };\n}\n\nexport function sendMessage(data) {\n  return (dispatch) => {\n    return fetch(apiUrl, { method: \"POST\", body: JSON.stringify(data) })\n      .then((response) => dispatch(pushMessage(data)));\n  }\n}\n\n\nconst initialState = {\n  messages: []\n};\n\nexport default createStore(function (state = initialState, action) {\n  switch (action.type) {\n    case ADD_MESSAGE: {\n      return {\n        ...state,\n        messages: [...state.messages, action.message]\n      };\n    }\n    case UPDATE_MESSAGES: {\n      return {\n        ...state,\n        messages: action.messages\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n}, applyMiddleware(thunkMiddleware));\n"]},"metadata":{},"sourceType":"module"}